generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  progress      Progress[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  image       String?
  published   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       Task[]
  materials   Material[]  @relation("CourseMaterials") // Добавляем связь

  @@map("courses")
}

model Material {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  content     String   @db.Text
  order       Int
  image       String?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, name: "CourseMaterials") // Добавляем имя связи
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("materials")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  difficulty  Difficulty   @default(MEDIUM)
  points      Int          @default(10)
  published   Boolean      @default(false)
  courseId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]
  
  @@map("tasks")
}

model Progress {
  id          String       @id @default(cuid())
  userId      String
  taskId      String
  status      Status       @default(NOT_STARTED)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
  @@map("progress")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}